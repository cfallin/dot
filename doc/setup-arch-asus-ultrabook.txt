- Disable secure boot in BIOS (but stay in UEFI mode: CSM disabled)
- Boot from USB stick of recent Arch Linux image (I used 2014.04.01)
  - on Asus UX302LA, can get to boot override menu by hitting Delete on
    startup.
  - IMPORTANT: need to add 'nomodeset i915.modeset=0' to end of kernel
    command line. Hit 'e' to edit the command line for the default option
    at the GRUB menu then F10 to boot.
- use gdisk on /dev/sda: remove all partitions, then create:
  - 500M Linux (type 8300) for /boot
  - 500M FAT32 (type ef00) for EFI system partition (ESP)
  - 50G Linux for /
  - 16G Linux for swap
  - remaining for /home
- Format everything:
  - mkfs.ext2 /dev/sda1
  - mkfs.fat -F32 /dev/sda2
  - mkfs.ext4 /dev/sda3
  - mkswap /dev/sda4
  - mkfs.btrfs /dev/sda5
- Mount everything under /mnt
- ensure network connectivity (wifi-menu for wireless)
- pacstrap /mnt base
- genfstab -p /mnt >> /mnt/etc/fstab
- arch-chroot /mnt
- In the chroot:
  - set up /etc/hostname and /etc/localtime (symlink to /usr/share/zoneinfo/...)
  - set up /etc/mkinitcpio.conf to include all modules
  - mkinitcpio -p linux
  - pacman -S grub dosfstools efibootmgr
  - grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB --recheck --debug
  - edit /etc/default/grub and add "nomodeset i915.modeset=0 acpi_osi=" to end of the GRUB_CMDLINE_LINUX value.
  - grub-mkconfig -o /boot/grub/grub.cfg
  - passwd (set root password)
- leave chroot, umount -R /mnt, reboot, ensure BIOS boots from hard drive ('GRUB' EFI entry)

- On next boot:
  - get a network connection (dhcpcd en0... if necessary)
  - pacman -S base-devel vim tmux wget bc openssh NetworkManager
  - enable NetworkManager (systemctl enable NetworkManager)
  - pacman -S xorg xorg-apps xorg-fonts xf86-video-intel xfce4 slim
  - download https://bitbucket.org/motley/kernel_asus_ux302/raw/32de56f32a016208febc6ff505e534a4c9fe24bf/motley_asus_ux302_custom_kernel.sh
  - edit script so that it doesn't delete build tree (will need this to build modules against it later)
  - run it, allow it to build kernel and ramdisk
  - edit /etc/default/grub, enable save-last-selected-option (last line, commented out by default)
  - grub-mkconfig -o /boot/grub/grub.cfg
  - edit the new stanza for the 'motley' kernel: it's missing the
    initrd command by default, uses /dev/sdX as a root (copy the UUID
    from the main Arch kernel command line instead), and remove the
    'nomodeset i915.modeset=0' options.
  - reboot into the new kernel.
  - enable slimd: systemctl enable slimd.service
  - add to /etc/modprobe.d/alsa.conf:
        options snd_hda_intel enable=0,1
        options snd slots=snd_hda_intel 
        options snd_hda_intel index=0
  - create /etc/modules-load.d/asus-kbd-backlight.conf:
        asus-nb-wmi
  - add to /etc/polkit-1/rules.d/50-default.rules:
        polkit.addRule(function(action, subject) {
            if (action.id.indexOf("org.freedesktop.NetworkManager.") == 0) {
                return polkit.Result.YES;
            }
        });
  - (use GNOME for sound/backlight/etc Fn keys to work!)

- Install packages:

    [enable multilib in pacman.conf]
    [add archlinuxfr repo to pacman.conf -- google yaourt]

    - from pacman:

        sudo git python scons emacs gvim tmux ruby firefox thunderbird pidgin gnome
        rhythmbox gthumb gimp cmake boost jdk7-openjdk clojure strace valgrind
        nmap vlc sshfs encfs clang llvm s3cmd mutt abook irssi sshpass fuse  nasm
        yasm keychain keepassx enscript subversion qt4 qt5 protobuf zlib acpi
        chromium gnupg redshift rsync openvpn ntp gnome-alsamixer xscreensaver
        dnsutils traceroute network-manager-applet rpmextract nodejs docker
        virtualbox virtualbox-host-dkms ghc rust tcl tk qemu yaourt alsa-utils
        lib32-libpulse gdb cups inkscape libreoffice texlive-most ack
        foomatic-db ghostscript gsfonts a2ps

    - from AUR (yaourt):

        jitsi midori-flash skype

- Enable a few services:

  systemctl enable sshd.service; systemctl start sshd.service
  systemctl enable ntpd.service; systemctl start ntpd.service
  systemctl enable dkms.service; systemctl start dkms.service

- Create user:

    edit /etc/login.defs, add 'CREATE_HOME yes'
    useradd myname
    passwd myname
    edit /etc/group, user to 'wheel'
    install sudo, edit /etc/sudoers, allow sudo (if desired)

- Set up home directory encryption:

  - install ecryptfs-utils
  - log out; log in as root
  - ecryptfs-migrate-user -u myname
  - add PAM entries as described in wiki: in /etc/pam.d/system-auth,
    - after "auth required pam_unix...", add "auth required pam_ecryptfs.so unwrap"
    - before "password requied pam_unix...", add "password optional pam_ecryptfs.so"
    - after "session required pam_unix...", add "session optional pam_ecryptfs.so"
  - log in as myname; check that $HOME is an encrypted mount
  - remove the renamed unecrypted homedir (/home/myname.$RANDOM_CHARS)

- Add SSD as block cache (using EnhanceIO, a fork of Facebook's flashcache)

  - git clone https://github.com/kcgthb/EnhanceIO (3.14 fix; stec-inc/EnhanceIO if they accept the pull request)
  - cd EnhanceIO/Driver/enhanceio; make && make install
  - cd EnhanceIO/CLI; cp eio_cli /sbin/; edit shebang (#!) line to point to python2
  - modeprobe eio_cli; create /etc/modules-load.d/enhanceio.conf with contents 'enhanceio'
  - rebuild ramdisk to include module (assumes mkinitcpio.conf includes all modules in ramdisk)
  - eio_cli create -d /dev/sda -s /dev/sdb -p lru -c ssdcache

- Backup restore instructions (cfallin-specific)

  - full system image (except /home) is on xap at /big/backup-max
    - prepared by ~cfallin/bin/backup-system.sh on max
  - home backup is on xap at ~cfallin/dl/backup-max-home
    - prepared by ~cfallin/bin/backup-home.sh on max
  - boot from Arch USB key, partition/format/mount target drive as above
  - rsync over root filesystem
  - reinstall grub (to register with UEFI)
  - reboot; recreate EnhanceIO cache setup; reboot again
  - recreate encrypted home setup as above
  - log in as cfallin; ensure encrypted ~ is mounted; rsync over /home

- Samba server/client setup:

  - Set up a Kerberos 5 realm:
    - install krb5 on Fedora desktop. Create kerberos database and user
      principals. Add host principal to /etc/krb5.keytab.
    - install krb5 on laptop. Set default realm. Comment out credentials cache
      filename override -- SMB client wants it in the default location
      /tmp/krb5cc_... . Ensure kinit and GSSAPI-enabled SSH work.
    - Install Samba on desktop. Set realm, security = ADS, kerberos method =
      system keytab, password server = <desktop>, passdb backend = tdbsam
    - Create cifs/<desktop> principal and add to keytab with rc4-hmac:normal
      encryption type
    - Test with smbclient -k -L //<fullname> after kinit.
